
# ████████╗███╗   ███╗██╗   ██╗██╗  ██╗    ██████╗ ██████╗ ███╗   ██╗███████╗
# ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝   ██╔════╝██╔═══██╗████╗  ██║██╔════╝
#    ██║   ██╔████╔██║██║   ██║ ╚███╔╝    ██║     ██║   ██║██╔██╗ ██║█████╗
#    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗    ██║     ██║   ██║██║╚██╗██║██╔══╝
#    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗██╗╚██████╗╚██████╔╝██║ ╚████║██║
#    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝

# {{{ Pane Management

# Smart pane management with awareness of Vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'
bind-key -n 'M-.' if-shell "$is_vim" 'send-keys M-.'  'split-window -h -c "#{pane_current_path}"'
bind-key -n 'M-,' if-shell "$is_vim" 'send-keys M-,'  'split-window -v -c "#{pane_current_path}"'

bind-key -T copy-mode-vi 'M-h' select-pane -L
bind-key -T copy-mode-vi 'M-j' select-pane -D
bind-key -T copy-mode-vi 'M-k' select-pane -U
bind-key -T copy-mode-vi 'M-l' select-pane -R
bind-key -T copy-mode-vi 'M-.' split-window -h -c "#{pane_current_path}"
bind-key -T copy-mode-vi 'M-,' split-window -v -c "#{pane_current_path}"

# Resize panes
bind -r 'j' resize-pane -D 5
bind -r 'k' resize-pane -U 5
bind -r 'h' resize-pane -L 5
bind -r 'l' resize-pane -R 5

# Panes use the current directory by default
bind '%' split-window -h -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# }}}

# {{{ Status Bar

color_sess="#[fg=white,nobright,dim][#[fg=green]"
color_win="#[fg=white]:#[fg=yellow]"
color_pane="#[fg=white]:#[fg=magenta]"
color_end="#[fg=white]]#[fg=blue,bright,nodim]"

set -g message-style "fg=white,bg=black"
set -g status-position top
set -g status-style bg=default
set -g status-left '#[fg=red]#{s/root//:client_key_table}'
set -g status-right '#[fg=red]#{s/root//:client_key_table}'
set -g window-status-format '#[fg=colour240,bright,nodim][#S:#W:#{b:pane_current_path}]#[fg=black,bright,dim]'
set -g window-status-current-format '#{color_sess}#S#{color_win}#W#{color_pane}#{b:pane_current_path}#{color_end}'
set -g status-justify centre

# Use black background on remote machines
if-shell 'test "$SSH_CONNECTION"' 'set -g status-bg black'

# }}}

# {{{ Window Management

# Window navigation using M keys
bind -n M-c new-window
bind -n M-p previous-window
bind -n M-n next-window

# }}}

# {{{ Options

set -g default-terminal "screen-256color"
set -g mouse on                 # Allow mouse scrolling
set -g escape-time 0            # Immediately send ESC (useful for Vim)
set -g repeat-time 10           # Allow key repetitions for 5s
set -g allow-rename off         # Disable automatic window renaming
set -g base-index 1             # Start counting from 1 instead of 0
set -g status-keys vi           # No idea but sounds good
set -g history-limit 10000      # So much history

# }}}

# {{{ Other Bindings

# Quick config reload
bind r source-file ~/.tmux.conf \; display-message " ✱ tmux.conf reloaded! "

# Don't populate rename prompts
bind-key , command-prompt "rename-window '%%'"
bind-key $ command-prompt "rename-session '%%'"

# }}}
