
" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"
" Author: Igor Andruskiewitsch
" License: MIT
" Notes:
" Basically a copy of my Neovim configuration, without plugins.
" Adds some extra configurations to emulate some of the plugins config.
" To be used in servers and places where you can't install much stuff

" {{{ Options

scriptencoding utf-8                    " set script encoding
set nocompatible                        " The future is now old man
set cursorline                          " Highlight the current line
set mouse=a                             " Enable mouse interaction
set scrolloff=3                         " When scrolling, use an offset of three lines
set noshowmode                          " Remove default mode indicator
set hlsearch incsearch                  " Highlight matches and patterns
set ignorecase smartcase incsearch      " Define search case matching
set nu rnu                              " Use relative line numbers
set path +=**                           " Kind of a fuzzy finder
set foldmethod=indent                   " Default fold method is using the syntax
set foldlevel=0                         " Automatically enable folds
set foldtext=FoldText()                 " Show custom fold text
set hid                                 " Buffers get hidden when abandoned
set backspace=eol,start,indent          " Don't mess with my backspace
set whichwrap+=<,>,h,l                  " Wrap around the characters when selecting
set lazyredraw                          " Macro optimization
set foldcolumn=1                        " Some left margin right here
set splitbelow splitright               " Open below and on the right side
set showtabline=2                       " Always show tab line
set laststatus=2                        " Always show the status line
set notitle noicon                      " Never show title or icon

syntax on                               " Enable syntax
filetype on                             " Enable file type matching
filetype plugin on                      " Enable plugins
let g:mapleader = ","                   " Define map leader

" {{{ Wild menu configuration

" Wild menu configuration
set wildmenu                            " Display matching files on tab complete
set wildmode=longest,list,full          " Wild menu configuration

" }}}

" {{{ Default tab configuration

set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" }}}

" {{{ Configure Indentation

filetype indent on
set autoindent smartindent

" }}}

" {{{ Special characters display configuration

set list
set fillchars+=vert:\·
let &showbreak='↪ '
let &listchars='tab:→ ,space:·,nbsp:␣,trail:•,eol:↲,precedes:«,extends:»'

" }}}

" {{{ Completion options

set completeopt+=menuone   " Show the pop up menu even when there is only 1 match
set completeopt+=noinsert  " Don't insert any text until user chooses a match
set completeopt+=noselect  " Don't select the first option automatically
set completeopt-=longest   " Don't insert the longest common text
set completeopt+=preview   " Show docs in V split
set belloff+=ctrlg         " Don't beep during completion

" }}}

" {{{ File browsing configs

let g:netrw_banner=0            " Disable annoying banner
let g:netrw_browse_split=4      " Open in prior window
let g:netrw_liststyle=3         " Tree view

" }}}

" {{{ Cursor configs

let &t_SI = "\e[6 q"            " Use bar cursor in insert mode
let &t_EI = "\e[2 q"            " Use block cursor in normal mode

" }}}

" }}}

" {{{ Colors

" Set colorscheme
set termguicolors
colorscheme desert

" Status line colors
hi statusline    ctermfg=black  ctermbg=cyan  guifg=black    guibg=#8fbfdc  gui=Bold  cterm=Bold
hi statuslinenc  ctermfg=cyan   ctermbg=239   guifg=#8fbfdc  guibg=#4e4e4e  gui=Bold  cterm=Bold
hi User1         ctermfg=cyan   ctermbg=239   guifg=#8fbfdc  guibg=#4e4e4e  gui=None  cterm=None
hi User2         ctermfg=007    ctermbg=239   guifg=#cdcdcd  guibg=#4e4e4e  gui=None  cterm=None
hi User3         ctermfg=cyan   ctermbg=239   guifg=#8fbfdc  guibg=#4e4e4e  gui=None  cterm=None
hi User4         ctermfg=007    ctermbg=239   guifg=#adadad  guibg=#4e4e4e  gui=None  cterm=None
hi Clear         ctermfg=None   ctermbg=None  guifg=None     guibg=None     gui=None  cterm=None

" Tab line colors
hi TabLineFill  ctermfg=cyan   ctermbg=239   guifg=#8fbfdc  guibg=#4e4e4e  gui=None  cterm=None
hi TabLine      ctermfg=cyan   ctermbg=239   guifg=#8fbfdc  guibg=#4e4e4e  gui=None  cterm=None
hi TabLineSel   ctermfg=black  ctermbg=cyan  guifg=black    guibg=#8fbfdc  gui=Bold  cterm=Bold
hi Title        ctermfg=black  ctermbg=None  guifg=black    guibg=None     gui=None  cterm=None

" Special characters colors
hi specialkey term=standout ctermfg=darkgray guifg=darkgray
hi nontext    term=standout ctermfg=darkgray guifg=darkgray

" Don't highlight vertical splits
hi VertSplit cterm=NONE

" }}}

" {{{ Auto-commands

augroup CustomTabs
    " Use tabs for Go Lang files
    autocmd FileType go exec 'set noexpandtab shiftwidth=8'

    " Use 2 spaces for JSON, YAML, TOML files
    autocmd FileType yaml exec 'set shiftwidth=2'
    autocmd FileType toml exec 'set shiftwidth=2'
    autocmd FileType json exec 'set shiftwidth=2'
augroup end

" Set up column wrapping
augroup ColumnWrapping
    autocmd FileType gitcommit exec 'set colorcolumn=50'
    autocmd FileType python exec 'set colorcolumn=80'
    autocmd FileType swift exec 'set colorcolumn=120'
augroup end

" Remove trailing white spaces when a file is saved
augroup RemoveTrailingWhitespaces
    autocmd BufWritePre * call RemoveTrailingWhitespaces()
augroup end

augroup Completion
    " Close floating completion pop-up when a selection is made
    autocmd CompleteDone * if !pumvisible() | pclose | endif

    " Open the completion menu every time we type
    autocmd InsertCharPre * call OpenCompletion()
augroup end

" Set up fold method marker for specific files
augroup FoldMethods
    autocmd FileType vim exec 'set foldmethod=marker'
    autocmd FileType zsh exec 'set foldmethod=marker'
    autocmd FileType sh exec 'set foldmethod=marker'
    autocmd FileType tmux exec 'set foldmethod=marker'
augroup end

" }}}

" {{{ Functions

" Opens the completion if possible
" Taken from: https://stackoverflow.com/questions/35837990
function! OpenCompletion()
    let l:isLetter = ((v:char >= 'a' && v:char <= 'z') || (v:char >= 'A' && v:char <= 'Z'))
    if !pumvisible() && l:isLetter
        call feedkeys("\<C-p>", "n")
    endif
endfunction

" Clear all trailing white spaces in the file
function! RemoveTrailingWhitespaces()
    let l:saved_position = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:saved_position)
endfunction

" Execute macro without dropping the visual range
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

function! FoldText()
    let line = getline(v:foldstart)
    let folded_line_num = v:foldend - v:foldstart
    let line_text = substitute(line, '^.*{{{\+', '', 'g')
    let fillcharcount = &textwidth - len(line_text) - len(folded_line_num)
    return '+'. repeat('-', 4) . line_text . repeat('.', fillcharcount) . ' (' . folded_line_num . ' L)'
    # dumb marker closer }}}
endfunction

" Opens a small terminal at the bottom
function! OpenTerminal()
    term
    resize 10
endfunction

" }}}

" {{{ Commands

" Prevent some common typos
command! W :w
command! Wqa :wqa
command! Q :q
command! Qa :qa

" Capitalize the given selection
command! -range Caps <line1>,<line2>s/\<./\u&/g | noh

" }}}

" {{{ Mappings

" Close file without saving
nnoremap XX :qa!<CR>

" Navigate using the display lines
nnoremap j gj
nnoremap k gk

" Clear highlights with <CR>
nnoremap <CR> :noh<CR>

" Execute the macro `q`
nnoremap <Space> @q

" Execute macro over visual range
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" Create vertical and horizontal panes
nnoremap <M-.> :vsp<return><ESC>
nnoremap <M-,> :sp<return><ESC>

" Navigate completion menu with Tab
inoremap <silent><expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Prevent new line inserted after selecting a completion
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" Use * to search the current selection
vnoremap <silent> * "zy/<C-R>=@z<CR><CR>

" Open a small terminal at the bottom
nnoremap <silent> <leader>t  <cmd>call OpenTerminal()<CR>

" }}}

" {{{ Status line

" {{{ Mode Names

let mode_names = {
    \"n":        "NORMAL",
    \"no":       "N·OP",
    \"v":        "VISUAL",
    \"V":        "V·LINE",
    \"\<C-v>":   "V·BLOCK",
    \"s":        "SELECT",
    \"S":        "S·LINE",
    \"\<C-s>":   "S·BLOCK",
    \"i":        "INSERT",
    \"ic":       "INSERT",
    \"ix":       "INSERT",
    \"R":        "REPLACE",
    \"Rv":       "V·REPLACE",
    \"c":        "COMMAND",
    \"cv":       "VIM EX",
    \"ce":       "EX",
    \"r":        "PROMPT",
    \"rm":       "MORE",
    \"r?":       "CONFIRM",
    \"!":        "SHELL",
    \"t":        "TERMINAL",
\}

" }}}

set statusline=
set statusline+=\ %{toupper(mode_names[mode()])}\       " The current mode
set statusline+=%1*                                     " Use color 1
set statusline+=\ %Y\                                   " File type
set statusline+=%2*                                     " Use color 1
set statusline+=\ %<%t%m%r%h%w\                         " File info
set statusline+=%=                                      " Right align
set statusline+=%1*                                     " Use color 1
set statusline+=\ C:%02v                                " Column
set statusline+=\ L:%02l/%02L\                          " Line number
set statusline+=%0*                                     " Use color 1
set statusline+=\ B%n\                                  " Buffer number
set statusline+=%#Clear#                                " Clear colors

" }}}
