" Minimal vimrc
" To be used in servers and places where you can't install much stuff

" {{{ Options

scriptencoding utf-8                    " set script encoding
set nocompatible                        " The future is now old man
set cursorline                          " Highlight the current line
set clipboard+=unnamedplus              " Use the system clipboard
set mouse=a                             " Enable mouse interaction
set scrolloff=3                         " When scrolling, use an offset of three lines
set noshowmode                          " Remove default mode indicator
set hlsearch incsearch                  " Highlight matches and patterns
set ignorecase smartcase incsearch      " Define search case matching
set nu rnu                              " Use relative line numbers
set path +=**                           " Kind of a fuzzy finder
set foldmethod=indent                   " Default fold method is using the syntax
set foldlevel=0                         " Automatically enable folds
set foldtext=FoldText()                 " Show custom fold text
set hid                                 " Buffers get hidden when abandoned
set backspace=eol,start,indent          " Don't mess with my backspace
set whichwrap+=<,>,h,l                  " Wrap around the characters when selecting
set lazyredraw                          " Macro optimization
set foldcolumn=1                        " Some left margin right here

" Wild menu configuration
set wildmenu                            " Display matching files on tab complete
set wildmode=longest,list,full          " Wild menu configuration

" Default tab configuration
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" Define the map leader
let g:mapleader = ","

syntax on                               " Enable syntax
filetype on                             " Enable file type matching
filetype plugin on                      " Enable plugins

" Configure Indentation
filetype indent on
set autoindent smartindent

" Configure completion options
set completeopt+=menuone   " Show the pop up menu even when there is only 1 match
set completeopt+=noinsert  " Don't insert any text until user chooses a match
set completeopt+=noselect  " Don't select the first option automatically
set completeopt-=longest   " Don't insert the longest common text
set completeopt+=preview   " Show docs in V split
set belloff+=ctrlg         " Don't beep during completion

" File browsing configs
let g:netrw_banner=0            " Disable annoying banner
let g:netrw_browse_split=4      " Open in prior window
let g:netrw_liststyle=3         " Tree view

let &t_SI = "\e[6 q"            " Use bar cursor in insert mode
let &t_EI = "\e[2 q"            " Use block cursor in normal mode

" }}}

" {{{ Auto-commands

" Use tabs for Go Lang files
autocmd FileType go exec 'set noexpandtab shiftwidth=8'

" Use 2 spaces for JSON, YAML, TOML files
autocmd FileType yaml exec 'set shiftwidth=2'
autocmd FileType toml exec 'set shiftwidth=2'
autocmd FileType json exec 'set shiftwidth=2'

" Set up column wrapping
autocmd FileType gitcommit exec 'set colorcolumn=50'
autocmd FileType python exec 'set colorcolumn=80'
autocmd FileType swift exec 'set colorcolumn=120'

" Remove trailing white spaces when a file is saved
autocmd BufWritePre * call RemoveTrailingWhitespaces()

" Close floating completion pop-up when a selection is made
autocmd CompleteDone * if !pumvisible() | pclose | endif

" Set up fold method marker for specific files
autocmd FileType vim exec 'set foldmethod=marker'
autocmd FileType zsh exec 'set foldmethod=marker'
autocmd FileType sh exec 'set foldmethod=marker'
autocmd FileType tmux exec 'set foldmethod=marker'

" }}}

" {{{ Colors

" Use one of the default color schemes
colorscheme desert

" }}}

" {{{ Functions

" Clear all trailing white spaces in the file
function! RemoveTrailingWhitespaces()
    let l:saved_position = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:saved_position)
endfunction

" Execute macro without dropping the visual range
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

function! FoldText()
    let line = getline(v:foldstart)
    let folded_line_num = v:foldend - v:foldstart
    let line_text = substitute(line, '^.*{{{\+', '', 'g')
    let fillcharcount = &textwidth - len(line_text) - len(folded_line_num)
    return '+'. repeat('-', 4) . line_text . repeat('.', fillcharcount) . ' (' . folded_line_num . ' L)'
    # dumb marker closer }}}
endfunction

" }}}

" {{{ Commands

" Prevent some common typos
command! W :w
command! Wqa :wqa
command! Q :q
command! Qa :qa

" Capitalize the given selection
command! -range Caps <line1>,<line2>s/\<./\u&/g | noh

" }}}

" {{{ Mappings

" Close file without saving
nnoremap XX :qa!<CR>

" Navigate using the display lines
nnoremap j gj
nnoremap k gk

" Clear highlights with <CR> or <ESC>
nnoremap <CR> :noh<CR>
nnoremap <ESC> :noh<CR>

" Execute the macro `q`
nnoremap <Space> @q

" Execute macro over visual range
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

" Create vertical and horizontal panes
nnoremap <M-.> :vsp<return><esc>
nnoremap <M-,> :sp<return><esc>

" Navigate completion menu with Tab
inoremap <silent><expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Prevent new line inserted after selecting a completion
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

" Use * to search the current selection
vnoremap <silent> * "zy/<C-R>=@z<CR><CR>


" }}}

" {{{ Status line

set statusline=                                                 " Init
set statusline+=\[%{toupper(mode())}\]                          " Mode indicator
set statusline+=%(%m%)                                          " Modified [+] / [-] flag
set statusline+=[%Y]
set statusline+=\ %t
set statusline+=%=                                              " Right align
set statusline+=\                                               " Space
set statusline+=[%1.5l:%1.5L]                                   " Line
set statusline+=[:\%c]                                          " Column
set statusline+=[%{&fileencoding?&fileencoding:&encoding}]      " File encoding

" }}}
